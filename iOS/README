This plugin lets you use the PayPal Mobile Express Checkout Library (MECL)
in a phonegap/iOS application.
At the moment, only the "Method Sequence with the PayPal Button on Your Mobile Webpage"
is supported by the plugin (and this shouldn't be a big deal).

This plugin has been successfully tested with Cordova 2.6.0.
Hopefully it will also work with newer releases.


Adding the plugin to your project
=================================
Using this plugin requires iOS PhoneGap/Cordova. Please refer to the PhoneGap
documentation to learn how to setup a new project ( http://docs.phonegap.com/en/2.6.0/guide_getting-started_index.md.html#Getting%20Started%20Guides ).

*** Please note that the PayPal MECL library requires internet access to contact 
PayPal servers, therefore you should make sure that your config.xml has the * wildcard
for the access node ***


1. To install the plugin, move www/js/MECLPayPalPlugin.js somewhere in your www folder
and include a reference to it in your html file, after cordova-VERSION.js.

    <script type="text/javascript" charset="utf-8" src="path/to/cordova-2.6.0.js"></script>
    <script type="text/javascript" charset="utf-8" src="path/to/MECLPayPalPlugin.js"></script>

2. Move or reference (better) the following .h and .m files in your project Plugins/ directory

	Plugins/MECLPayPalPlugin.h
	Plugins/MECLPayPalPlugin.m

3. In your config.xml file add the following key/value pair to the Plugins dictionary:

	key: MECLPayPalPlugin
	value: MECLPayPalPlugin


4. Download the PayPal library from: https://www.x.com/developers/paypal/documentation-tools/sdk
and add the following files to your project Plugins/ directory
	
	Plugins/PayPal.h
	Plugins/libPayPalEC.a

This distribution contains a copy of those files (version 1-0-3, md5sum f0bcdd212a9a6fdf39d911d5bb8c0b19) for your convenience, but
you should download the latest copy from the url above.


5. In XCode add the following resources in the "Linked Frameworks and Libraries" section (the app won't compile otherwise):

  libxml2.dylib
  Security.Framework

6. ??

7. Profit


Using the plugin
=================
The plugin creates the 	window.plugins.meclPayPal  object, with the following method:

	fetchDeviceReferenceTokenWithAppID(callback)

The callback argument is a function that takes a single argument:

	function meclCallback(deviceToken){
		...
	}

The deviceToken argument can be the device reference token string returned by PayPal servers
or null if something went wrong.

As you have noticed, at the moment the only MECL API that's exposed to javascript by the plugin is:

	fetchDeviceReferenceTokenWithAppID

You're encouraged to read the official documentation:

	PayPal Mobile Express Checkout Library Developer Guide and Reference - iOS

to fully understand how this API works.

It's worth noticing that the native code of this plugin uses some default settings that must be
changed before deploying and after submitting your app to PayPal.
These are:

	Application ID: your live appID is sent by PayPal after their review of your application

	Server: ENV_SANDBOX is the default setting of the plugin. Must be changed to ENV_LIVE
		before going to production

To change these values, just open the file

	MECLPayPalPlugin.m

and edit the following lines to suit your needs:

	/* get the app id from developer.paypal.com */
	#define PP_APP_ID @"APP-80W284485P519543T"
	/* ENV_NONE (offline), ENV_SANDBOX or ENV_LIVE */
	#define PP_APP_ENV ENV_SANDBOX


But how this device token should be used?
=========================================
You must understand how the PayPal Express Checkout flow works.
It's really really simple once you grasp the underlying concept.
It goes without saying that you must also have a working server backend
(read the PayPal Express Checkout Integration Guide if you've some troubles and
remember that you can find a lot of examples on www.x.com,
	https://www.x.com/developers/paypal/documentation-tools/sdk
)

To sum it up in some basic steps:

	* your app gets a device token
	* your app opens a webview (with the InAppBrowser Cordova API) to a certain url
	  on YOUR backend server, providing the token and the "cart" info
	* your app installs an handler on the webview location change event (this is
    the "loadstop" event in the InAppBrowser documentation)
	* your backend server calls SetExpressCheckout and gets the checkout token
	* your backend server redirects to www.paypal.com and provides both the device
	  and the checkout token
	* the user reviews the transaction on paypal.com and is redirected to your
	  backend server again
	* the user confirms the payment on your server
	* your server calls DoExpressCheckoutPayment and redirects the browser to a
	  certain SUCCESS_URL
	* your application reacts on this location change, closes the webview and calls
	  your server to receive a confirmation that the transaction was successful

The flow may change a little bit but the basic idea remains the same.
Once again, read the official PayPal documentation, it's really well written and exhaustive
and have a look at the code samples.


Example
=======
Under the example/ directory there's a project you should be able to import into Xcode4 to
test out the plugin with a working server backend.
This backend is the one used by the official PayPal MECL Library example.

Please note that you'll need a working PayPal sandbox buyer account to test the payment.

